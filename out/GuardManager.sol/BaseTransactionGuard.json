{"abi":[{"type":"function","name":"checkAfterExecution","inputs":[{"name":"hash","type":"bytes32","internalType":"bytes32"},{"name":"success","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"checkTransaction","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"operation","type":"uint8","internalType":"enum Enum.Operation"},{"name":"safeTxGas","type":"uint256","internalType":"uint256"},{"name":"baseGas","type":"uint256","internalType":"uint256"},{"name":"gasPrice","type":"uint256","internalType":"uint256"},{"name":"gasToken","type":"address","internalType":"address"},{"name":"refundReceiver","type":"address","internalType":"address payable"},{"name":"signatures","type":"bytes","internalType":"bytes"},{"name":"msgSender","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"checkAfterExecution(bytes32,bool)":"93271368","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"75f0bb52","supportsInterface(bytes4)":"01ffc9a7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"checkAfterExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"checkTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkAfterExecution(bytes32,bool)\":{\"details\":\"The function needs to implement a check after the execution of the transaction.\",\"params\":{\"hash\":\"The hash of the transaction.\",\"success\":\"The status of the transaction execution.\"}},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"details\":\"The function needs to implement transaction validation logic.\",\"params\":{\"baseGas\":\"The base gas for the transaction.\",\"data\":\"The transaction data.\",\"gasPrice\":\"The price of gas in Wei for the transaction.\",\"gasToken\":\"The token used to pay for gas.\",\"msgSender\":\"The address of the message sender.\",\"operation\":\"The type of operation of the transaction.\",\"refundReceiver\":\"The address which should receive the refund.\",\"safeTxGas\":\"Gas used for the transaction.\",\"signatures\":\"The signatures of the transaction.\",\"to\":\"The address to which the transaction is intended.\",\"value\":\"The value of the transaction in Wei.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAfterExecution(bytes32,bool)\":{\"notice\":\"Checks after execution of the transaction.\"},\"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)\":{\"notice\":\"Checks the transaction details.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/safe-contracts/contracts/base/GuardManager.sol\":\"BaseTransactionGuard\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@1inch/solidity-utils/=lib/solidity-utils/\",\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@gnosis.pm/safe-contracts/=lib/safe-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/\",\":solidity-utils/=lib/solidity-utils/\"],\"viaIR\":true},\"sources\":{\"lib/safe-contracts/contracts/base/GuardManager.sol\":{\"keccak256\":\"0x034ee0450cd1fa3d4f4ab47e288133abb2c7e513354e750524877ad763624e27\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://d22c4d1a5f719fba1ac68c207b4ba3ecb1fd5d57ca3bbcf11fe17012ea458e66\",\"dweb:/ipfs/QmciLrkeNeK6yi7t3RmTGQ2nrzqc3NoFNiWgRu3XYz1bGw\"]},\"lib/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"keccak256\":\"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://a4736edb9b16d02736f4bf8c02c1cd80381ec33de48ffc59669529f184e82f66\",\"dweb:/ipfs/QmbcYa5r5vaVDfGyMmQc42uajtDwLYgrhYV3Eb3AFWdPjf\"]},\"lib/safe-contracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://bb2039e1459ace1e68761e873632fc339866332f9f5ecb7452a0bc3a3b847e89\",\"dweb:/ipfs/QmYXvDQXJnDkXFvsvKLyZXaAv4x42qvtbtmwHftP4RKX38\"]},\"lib/safe-contracts/contracts/interfaces/IGuardManager.sol\":{\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://2dc7168a23df7c619762fdd1c315560b091761ab93acca60d3e8a53a9cf07f3e\",\"dweb:/ipfs/QmULbk2n7J2BUwpQFt27Gah39vQpUFmcfTXGbBj73Mpy9y\"]},\"lib/safe-contracts/contracts/libraries/Enum.sol\":{\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://157e5965acf507aa5f0fd50c2855a489a773cae99ca03ca7479a7ea3986badde\",\"dweb:/ipfs/QmaVyMAw8a6oaSR2aDw5U7JbW76qkunpqFfZn5pTD5pjvD\"]},\"lib/safe-contracts/contracts/libraries/ErrorMessage.sol\":{\"keccak256\":\"0x94898c1134378628d5f9420a16cbab3dc542386d0cbb2cabfceba3eba502c2be\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://add50c6f6c32ffd87c6dd1f2fa98ff6b09cb16af0d216bd7ebe83ea017522622\",\"dweb:/ipfs/QmXHCZE2xdzSq5r7jKdvS4ZAaRKsDWbgzSGfnwZZmDEhPm\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"checkAfterExecution"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address payable","name":"refundReceiver","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"},{"internalType":"address","name":"msgSender","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"checkTransaction"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"checkAfterExecution(bytes32,bool)":{"details":"The function needs to implement a check after the execution of the transaction.","params":{"hash":"The hash of the transaction.","success":"The status of the transaction execution."}},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"details":"The function needs to implement transaction validation logic.","params":{"baseGas":"The base gas for the transaction.","data":"The transaction data.","gasPrice":"The price of gas in Wei for the transaction.","gasToken":"The token used to pay for gas.","msgSender":"The address of the message sender.","operation":"The type of operation of the transaction.","refundReceiver":"The address which should receive the refund.","safeTxGas":"Gas used for the transaction.","signatures":"The signatures of the transaction.","to":"The address to which the transaction is intended.","value":"The value of the transaction in Wei."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"userdoc":{"kind":"user","methods":{"checkAfterExecution(bytes32,bool)":{"notice":"Checks after execution of the transaction."},"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":{"notice":"Checks the transaction details."}},"version":1}},"settings":{"remappings":["@1inch/solidity-utils/=lib/solidity-utils/","@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/","@gnosis.pm/safe-contracts/=lib/safe-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","safe-contracts/=lib/safe-contracts/","solidity-utils/=lib/solidity-utils/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/safe-contracts/contracts/base/GuardManager.sol":"BaseTransactionGuard"},"evmVersion":"shanghai","libraries":{},"viaIR":true},"sources":{"lib/safe-contracts/contracts/base/GuardManager.sol":{"keccak256":"0x034ee0450cd1fa3d4f4ab47e288133abb2c7e513354e750524877ad763624e27","urls":["bzz-raw://d22c4d1a5f719fba1ac68c207b4ba3ecb1fd5d57ca3bbcf11fe17012ea458e66","dweb:/ipfs/QmciLrkeNeK6yi7t3RmTGQ2nrzqc3NoFNiWgRu3XYz1bGw"],"license":"LGPL-3.0-only"},"lib/safe-contracts/contracts/common/SelfAuthorized.sol":{"keccak256":"0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5","urls":["bzz-raw://a4736edb9b16d02736f4bf8c02c1cd80381ec33de48ffc59669529f184e82f66","dweb:/ipfs/QmbcYa5r5vaVDfGyMmQc42uajtDwLYgrhYV3Eb3AFWdPjf"],"license":"LGPL-3.0-only"},"lib/safe-contracts/contracts/interfaces/IERC165.sol":{"keccak256":"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb","urls":["bzz-raw://bb2039e1459ace1e68761e873632fc339866332f9f5ecb7452a0bc3a3b847e89","dweb:/ipfs/QmYXvDQXJnDkXFvsvKLyZXaAv4x42qvtbtmwHftP4RKX38"],"license":"LGPL-3.0-only"},"lib/safe-contracts/contracts/interfaces/IGuardManager.sol":{"keccak256":"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab","urls":["bzz-raw://2dc7168a23df7c619762fdd1c315560b091761ab93acca60d3e8a53a9cf07f3e","dweb:/ipfs/QmULbk2n7J2BUwpQFt27Gah39vQpUFmcfTXGbBj73Mpy9y"],"license":"LGPL-3.0-only"},"lib/safe-contracts/contracts/libraries/Enum.sol":{"keccak256":"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261","urls":["bzz-raw://157e5965acf507aa5f0fd50c2855a489a773cae99ca03ca7479a7ea3986badde","dweb:/ipfs/QmaVyMAw8a6oaSR2aDw5U7JbW76qkunpqFfZn5pTD5pjvD"],"license":"LGPL-3.0-only"},"lib/safe-contracts/contracts/libraries/ErrorMessage.sol":{"keccak256":"0x94898c1134378628d5f9420a16cbab3dc542386d0cbb2cabfceba3eba502c2be","urls":["bzz-raw://add50c6f6c32ffd87c6dd1f2fa98ff6b09cb16af0d216bd7ebe83ea017522622","dweb:/ipfs/QmXHCZE2xdzSq5r7jKdvS4ZAaRKsDWbgzSGfnwZZmDEhPm"],"license":"LGPL-3.0-only"}},"version":1},"id":40}