{"abi":[{"type":"function","name":"and","inputs":[{"name":"offsets","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"arbitraryStaticCall","inputs":[{"name":"target","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"eq","inputs":[{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"gt","inputs":[{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"lt","inputs":[{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"not","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"or","inputs":[{"name":"offsets","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"error","name":"ArbitraryStaticCallFailed","inputs":[]}],"bytecode":{"object":"0x6080806040523461001657610395908161001b8239f35b5f80fdfe604060808152600480361015610013575f80fd5b5f3560e01c9081634f38e2b8146101dd5781636fe7b0ba146101ac5781637426114514610191578163bf15fcd814610125578163bf797959146100cd57508063bfa75143146100a95763ca4ece221461006a575f80fd5b346100a55761008860209161007e3661023c565b909391933061033b565b8193919361009b575b5050519015158152f35b1091505f80610091565b5f80fd5b50346100a5576020906100c46100be3661023c565b916102df565b90519015158152f35b82346100a55760203660031901126100a55781359167ffffffffffffffff83116100a55761010361010a9160209436910161020e565b903061033b565b8192919261011c575b50519015158152f35b15915083610113565b82346100a557806003193601126100a55781356001600160a01b03811681036100a5576024359067ffffffffffffffff82116100a55761016b610171923690860161020e565b9161033b565b919015610182576020925051908152f35b51631f1b8f6160e01b81529050fd5b82346100a5576020906100c46101a63661023c565b91610288565b82346100a5576101c160209161007e3661023c565b819391936101d3575050519015158152f35b1491508380610091565b82346100a5576101f260209161007e3661023c565b81939193610204575050519015158152f35b1191508380610091565b9181601f840112156100a55782359167ffffffffffffffff83116100a557602083818601950101116100a557565b9060406003198301126100a557600435916024359067ffffffffffffffff82116100a55761026c9160040161020e565b9091565b909392938483116100a55784116100a5578101920390565b929091925f5b63ffffffff82169081156102d557610103826102ab928888610270565b816102ca575b506102c0579060201c9061028e565b5050915050600190565b60019150145f6102b1565b5050509150505f90565b929091925f5b63ffffffff82169081156103305761010382610302928888610270565b9015908115610324575b5061031b579060201c906102e5565b50509150505f90565b6001915014155f61030c565b505050915050600190565b915f906020928294826040519283375afa60203d1416918261035957565b5f51915056fea2646970667358221220a6f60fe43a6511b151a5a598e4bcf64881fbb9ab8095c4aed68cf8482eb98c9764736f6c63430008170033","sourceMap":"152:3758:78:-:0;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x604060808152600480361015610013575f80fd5b5f3560e01c9081634f38e2b8146101dd5781636fe7b0ba146101ac5781637426114514610191578163bf15fcd814610125578163bf797959146100cd57508063bfa75143146100a95763ca4ece221461006a575f80fd5b346100a55761008860209161007e3661023c565b909391933061033b565b8193919361009b575b5050519015158152f35b1091505f80610091565b5f80fd5b50346100a5576020906100c46100be3661023c565b916102df565b90519015158152f35b82346100a55760203660031901126100a55781359167ffffffffffffffff83116100a55761010361010a9160209436910161020e565b903061033b565b8192919261011c575b50519015158152f35b15915083610113565b82346100a557806003193601126100a55781356001600160a01b03811681036100a5576024359067ffffffffffffffff82116100a55761016b610171923690860161020e565b9161033b565b919015610182576020925051908152f35b51631f1b8f6160e01b81529050fd5b82346100a5576020906100c46101a63661023c565b91610288565b82346100a5576101c160209161007e3661023c565b819391936101d3575050519015158152f35b1491508380610091565b82346100a5576101f260209161007e3661023c565b81939193610204575050519015158152f35b1191508380610091565b9181601f840112156100a55782359167ffffffffffffffff83116100a557602083818601950101116100a557565b9060406003198301126100a557600435916024359067ffffffffffffffff82116100a55761026c9160040161020e565b9091565b909392938483116100a55784116100a5578101920390565b929091925f5b63ffffffff82169081156102d557610103826102ab928888610270565b816102ca575b506102c0579060201c9061028e565b5050915050600190565b60019150145f6102b1565b5050509150505f90565b929091925f5b63ffffffff82169081156103305761010382610302928888610270565b9015908115610324575b5061031b579060201c906102e5565b50509150505f90565b6001915014155f61030c565b505050915050600190565b915f906020928294826040519283375afa60203d1416918261035957565b5f51915056fea2646970667358221220a6f60fe43a6511b151a5a598e4bcf64881fbb9ab8095c4aed68cf8482eb98c9764736f6c63430008170033","sourceMap":"152:3758:78:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2501:39;152:3758;;;;;:::i;:::-;2528:4;;;;;2501:39;:::i;:::-;2557:22;;;;;;152:3758;;;;;;;;;;2557:22;2568:11;;-1:-1:-1;2557:22:78;;;;152:3758;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;152:3758:78;;;;;;;;;;;;;1649:39;152:3758;;;;;;;:::i;:::-;1676:4;;1649:39;:::i;:::-;1705:19;;;;;;152:3758;;;;;;;;;1705:19;1716:8;;-1:-1:-1;1705:19:78;;;152:3758;;;;;;;;;;;;;;;-1:-1:-1;;;;;152:3758:78;;;;;;;;;;;;;;;3273:32;152:3758;;;;;;:::i;:::-;3273:32;;:::i;:::-;3319:8;;;3315:48;;152:3758;;;;;;;;3315:48;152:3758;-1:-1:-1;;;3336:27:78;;152:3758;-1:-1:-1;3336:27:78;152:3758;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;2070:39;152:3758;;;;;:::i;2070:39::-;2126:23;;;;;;152:3758;;;;;;;;;2126:23;2137:12;;-1:-1:-1;2126:23:78;;;;152:3758;;;;;2933:39;152:3758;;;;;:::i;2933:39::-;2989:22;;;;;;152:3758;;;;;;;;;2989:22;3000:11;;-1:-1:-1;2989:22:78;;;;152:3758;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;152:3758:78;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;364:438::-;;;;;152:3758;532:14;152:3758;;;498:32;;;;;626:22;;592:57;626:22;;;;:::i;592:57::-;667:19;;;532:14;663:69;;;532:14;544:2;152:3758;481:15;;;663:69;706:11;;;;;713:4;706:11;:::o;667:19::-;685:1;678:8;;;667:19;;;498:32;;;;;;;152:3758;364:438;:::o;951:440::-;;;;;152:3758;1120:14;152:3758;;;1086:32;;;;;1214:22;;1180:57;1214:22;;;;:::i;1180:57::-;1255:8;;152:3758;;;1255:20;;1120:14;1251:71;;;1120:14;1132:2;152:3758;1069:15;;;1251:71;1295:12;;;;;152:3758;1295:12;:::o;1255:20::-;1274:1;1267:8;;;;1255:20;;;1086:32;;;;;;;1380:4;951:440;:::o;3396:512::-;;152:3758;3396:512;3520:382;3396:512;3497:11;3520:382;;;;;;;;;;;;;;;;;3396:512::o;3520:382::-;152:3758;3520:382;;-1:-1:-1;3396:512:78:o","linkReferences":{}},"methodIdentifiers":{"and(uint256,bytes)":"bfa75143","arbitraryStaticCall(address,bytes)":"bf15fcd8","eq(uint256,bytes)":"6fe7b0ba","gt(uint256,bytes)":"4f38e2b8","lt(uint256,bytes)":"ca4ece22","not(bytes)":"bf797959","or(uint256,bytes)":"74261145"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ArbitraryStaticCallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"and\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"arbitraryStaticCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"eq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"gt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"not\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"or\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"and(uint256,bytes)\":{\"returns\":{\"_0\":\"Result True if calls to all targets returned True. Otherwise, false\"}},\"arbitraryStaticCall(address,bytes)\":{\"returns\":{\"_0\":\"Result Bytes transmuted to uint256\"}},\"eq(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns the same value as `value`. Otherwise, false\"}},\"gt(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is bigger than `value`. Otherwise, false\"}},\"lt(uint256,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is lower than `value`. Otherwise, false\"}},\"not(bytes)\":{\"returns\":{\"_0\":\"Result True if call to target returns 0. Otherwise, false\"}},\"or(uint256,bytes)\":{\"returns\":{\"_0\":\"Result True if call to any target returned True. Otherwise, false\"}}},\"title\":\"A helper contract for executing boolean functions on arbitrary target call results\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"and(uint256,bytes)\":{\"notice\":\"Calls every target with corresponding data\"},\"arbitraryStaticCall(address,bytes)\":{\"notice\":\"Performs an arbitrary call to target with data\"},\"eq(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to the value\"},\"gt(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's bigger than value\"},\"lt(uint256,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's lower than value\"},\"not(bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to 0\"},\"or(uint256,bytes)\":{\"notice\":\"Calls every target with corresponding data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/helpers/PredicateHelper.sol\":\"PredicateHelper\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@1inch/solidity-utils/=lib/solidity-utils/\",\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@gnosis.pm/safe-contracts/=lib/safe-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/\",\":solidity-utils/=lib/solidity-utils/\"],\"viaIR\":true},\"sources\":{\"src/helpers/PredicateHelper.sol\":{\"keccak256\":\"0xe62318715d108d282ae4ff9dc4122fbaf606228269314e762711c4054eea83d8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09060bee15d87b3de592d07552fdba97121ba3726f9ce877b00329b37ec771e6\",\"dweb:/ipfs/QmNz7JdxZd2e4NYaZXtgmenWaYmBAsL9PpqDCrmrBUNUKw\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ArbitraryStaticCallFailed"},{"inputs":[{"internalType":"uint256","name":"offsets","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"and","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"arbitraryStaticCall","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"eq","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"gt","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"lt","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"not","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"offsets","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"or","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"and(uint256,bytes)":{"returns":{"_0":"Result True if calls to all targets returned True. Otherwise, false"}},"arbitraryStaticCall(address,bytes)":{"returns":{"_0":"Result Bytes transmuted to uint256"}},"eq(uint256,bytes)":{"params":{"value":"Value to test"},"returns":{"_0":"Result True if call to target returns the same value as `value`. Otherwise, false"}},"gt(uint256,bytes)":{"params":{"value":"Value to test"},"returns":{"_0":"Result True if call to target returns value which is bigger than `value`. Otherwise, false"}},"lt(uint256,bytes)":{"params":{"value":"Value to test"},"returns":{"_0":"Result True if call to target returns value which is lower than `value`. Otherwise, false"}},"not(bytes)":{"returns":{"_0":"Result True if call to target returns 0. Otherwise, false"}},"or(uint256,bytes)":{"returns":{"_0":"Result True if call to any target returned True. Otherwise, false"}}},"version":1},"userdoc":{"kind":"user","methods":{"and(uint256,bytes)":{"notice":"Calls every target with corresponding data"},"arbitraryStaticCall(address,bytes)":{"notice":"Performs an arbitrary call to target with data"},"eq(uint256,bytes)":{"notice":"Calls target with specified data and tests if it's equal to the value"},"gt(uint256,bytes)":{"notice":"Calls target with specified data and tests if it's bigger than value"},"lt(uint256,bytes)":{"notice":"Calls target with specified data and tests if it's lower than value"},"not(bytes)":{"notice":"Calls target with specified data and tests if it's equal to 0"},"or(uint256,bytes)":{"notice":"Calls every target with corresponding data"}},"version":1}},"settings":{"remappings":["@1inch/solidity-utils/=lib/solidity-utils/","@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/","@gnosis.pm/safe-contracts/=lib/safe-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","safe-contracts/=lib/safe-contracts/","solidity-utils/=lib/solidity-utils/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/helpers/PredicateHelper.sol":"PredicateHelper"},"evmVersion":"shanghai","libraries":{},"viaIR":true},"sources":{"src/helpers/PredicateHelper.sol":{"keccak256":"0xe62318715d108d282ae4ff9dc4122fbaf606228269314e762711c4054eea83d8","urls":["bzz-raw://09060bee15d87b3de592d07552fdba97121ba3726f9ce877b00329b37ec771e6","dweb:/ipfs/QmNz7JdxZd2e4NYaZXtgmenWaYmBAsL9PpqDCrmrBUNUKw"],"license":"MIT"}},"version":1},"id":78}