{"abi":[{"type":"function","name":"getStorageAt","inputs":[{"name":"offset","type":"uint256","internalType":"uint256"},{"name":"length","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"simulateAndRevert","inputs":[{"name":"targetContract","type":"address","internalType":"address"},{"name":"calldataPayload","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getStorageAt(uint256,uint256)":"5624b25b","simulateAndRevert(address,bytes)":"b4faba09"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getStorageAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulateAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@safe-global/safe-protocol\",\"kind\":\"dev\",\"methods\":{\"getStorageAt(uint256,uint256)\":{\"params\":{\"length\":\"The number of words (32 bytes) of data to read.\",\"offset\":\"The offset in the current contract's storage in words to start reading from.\"},\"returns\":{\"_0\":\"The bytes that were read.\"}},\"simulateAndRevert(address,bytes)\":{\"details\":\"Internally reverts execution to avoid side effects (making it effectively static).      This method reverts with data equal to `abi.encodePacked(uint256(success), uint256(response.length), bytes(response))`.      Specifically, the return data after a call to this method will be:      `success:uint256 || response.length:uint256 || response:bytes`.\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}}},\"title\":\"Storage Accessible Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStorageAt(uint256,uint256)\":{\"notice\":\"Reads `length` bytes of storage in the current contract\"},\"simulateAndRevert(address,bytes)\":{\"notice\":\"Performs a `DELEGATECALL` to a `targetContract` in the context of self.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/safe-contracts/contracts/interfaces/IStorageAccessible.sol\":\"IStorageAccessible\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@1inch/solidity-utils/=lib/solidity-utils/\",\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@gnosis.pm/safe-contracts/=lib/safe-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/\",\":solidity-utils/=lib/solidity-utils/\"],\"viaIR\":true},\"sources\":{\"lib/safe-contracts/contracts/interfaces/IStorageAccessible.sol\":{\"keccak256\":\"0x0a06ff2bcca70a1a5926aa71473a515e073b85f217fd3c8594e922880758db1c\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://41ee6f1d043a6d021d98eb9e97aa728fe401bfddb6ccbd3502a8394a190c89db\",\"dweb:/ipfs/QmaDAi6w52tsbXBDtDRUdkHS1n8B2YVhkwesiw7zHp5XEE\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"offset","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"stateMutability":"view","type":"function","name":"getStorageAt","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"bytes","name":"calldataPayload","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"simulateAndRevert"}],"devdoc":{"kind":"dev","methods":{"getStorageAt(uint256,uint256)":{"params":{"length":"The number of words (32 bytes) of data to read.","offset":"The offset in the current contract's storage in words to start reading from."},"returns":{"_0":"The bytes that were read."}},"simulateAndRevert(address,bytes)":{"details":"Internally reverts execution to avoid side effects (making it effectively static).      This method reverts with data equal to `abi.encodePacked(uint256(success), uint256(response.length), bytes(response))`.      Specifically, the return data after a call to this method will be:      `success:uint256 || response.length:uint256 || response:bytes`.","params":{"calldataPayload":"Calldata that should be sent to the target contract (encoded method name and arguments).","targetContract":"Address of the contract containing the code to execute."}}},"version":1},"userdoc":{"kind":"user","methods":{"getStorageAt(uint256,uint256)":{"notice":"Reads `length` bytes of storage in the current contract"},"simulateAndRevert(address,bytes)":{"notice":"Performs a `DELEGATECALL` to a `targetContract` in the context of self."}},"version":1}},"settings":{"remappings":["@1inch/solidity-utils/=lib/solidity-utils/","@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/","@gnosis.pm/safe-contracts/=lib/safe-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","safe-contracts/=lib/safe-contracts/","solidity-utils/=lib/solidity-utils/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/safe-contracts/contracts/interfaces/IStorageAccessible.sol":"IStorageAccessible"},"evmVersion":"shanghai","libraries":{},"viaIR":true},"sources":{"lib/safe-contracts/contracts/interfaces/IStorageAccessible.sol":{"keccak256":"0x0a06ff2bcca70a1a5926aa71473a515e073b85f217fd3c8594e922880758db1c","urls":["bzz-raw://41ee6f1d043a6d021d98eb9e97aa728fe401bfddb6ccbd3502a8394a190c89db","dweb:/ipfs/QmaDAi6w52tsbXBDtDRUdkHS1n8B2YVhkwesiw7zHp5XEE"],"license":"LGPL-3.0-only"}},"version":1},"id":58}